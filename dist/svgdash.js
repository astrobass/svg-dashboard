/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/DialFullBasic.js":
/*!******************************!*\
  !*** ./src/DialFullBasic.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function DialFullBasic(element, optionsString) {\n  const strokeWidth = 2;\n  const needleWidth = 6;\n  const markerWidth = 3;\n  const numMarkers = 61;\n  const redMarkers = Math.floor(numMarkers * 0.8);\n  const noColor = '#cdcdcd';\n  const width = 300;\n  const height = width;\n  const outerRadius = width / 2 * 0.95;\n  const middleRadius = width / 2 * 0.75;\n  const innerRadius = width / 2 * 0.25;\n  const markerRadius = middleRadius * 1.07;\n  const markerRadiusMajor = middleRadius * 1.20;\n  const markerRadiusMinor = middleRadius * 1.13;\n  const textRadius = middleRadius * 0.9;\n  const startMx = (width - markerRadius * 2) / 2;\n  const startLx = (width - markerRadiusMajor * 2) / 2;\n  const startLMinorx = (width - markerRadiusMinor * 2) / 2;\n  const startY = height / 2;\n  const startTx = (width - textRadius * 2) / 2;\n  const startTy = height / 2;\n  const paths = [];\n  const needleString = `M ${(width / 2)} ${(height / 2 + needleWidth / 2)} L${(width / 2)} ${(height / 2 - needleWidth / 2)} L${(width / 2 - middleRadius)} ${height / 2}z`;\n  const document = element.ownerDocument;\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  const svgNS = svg.namespaceURI;\n  const needle = document.createElementNS(svgNS, 'path');\n  const text = document.createElementNS(svgNS, 'text');\n  const textNode = document.createTextNode('');\n  const g = document.createElementNS(svgNS, 'g');\n  const texts = [];\n  const textNodes = [];\n  const options = JSON.parse(optionsString);\n  const min = options.minValue || 0;\n  const max = options.maxValue || 100;\n  const middleCircleFillColor = options.backgroundColor || '#2a2a2a';\n  const innerCircleFillColor = options.trimColor || '#660000';\n  const circleStrokeColor = options.trimColor || '#660000';\n  const needleColor = options.needleColor || '#da1b27';\n  const markerBackgroundColor = options.markerBackgroundColor || '#2a2a2a';\n  const normalColor = options.normalColor || 'green';\n  const warningColor = options.warningColor || 'red';\n\n  let circle;\n  let mx;\n  let my;\n  let lx;\n  let ly;\n  let tx;\n  let ty;\n  let pathString = '';\n\n\n  // Set up SVG\n\n  svg.setAttribute('width', width);\n  svg.setAttribute('height', height);\n  svg.setAttribute('viewBox', `${0} ${0} ${width} ${height}`);\n\n  // SVG Defs\n\n  // Draw elements\n\n  // Draw outer circle\n\n  circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', width / 2);\n  circle.setAttribute('cy', height / 2);\n  circle.setAttribute('r', outerRadius);\n  circle.setAttribute('fill', markerBackgroundColor);\n  svg.appendChild(circle);\n\n  // Draw middle circle\n\n  circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', width / 2);\n  circle.setAttribute('cy', height / 2);\n  circle.setAttribute('r', middleRadius);\n  circle.setAttribute('stroke', circleStrokeColor);\n  circle.setAttribute('stroke-width', strokeWidth);\n  circle.setAttribute('fill', middleCircleFillColor);\n  svg.appendChild(circle);\n\n  // Draw markers\n\n  g.setAttribute('id', 'markers');\n  for (let i = 0; i < numMarkers; i += 1) {\n    paths[i] = document.createElementNS(svgNS, 'path');\n    mx = Math.round((startMx + markerRadius\n      + markerRadius * Math.cos(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n    my = Math.trunc((startY\n      + markerRadius * Math.sin(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n    if (i % 5 == 0) {\n      lx = Math.round((startLx + markerRadiusMajor\n        + markerRadiusMajor * Math.cos(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      ly = Math.trunc((startY\n        + markerRadiusMajor * Math.sin(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n    } else {\n      lx = Math.round((startLMinorx + markerRadiusMinor\n        + markerRadiusMinor * Math.cos(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      ly = Math.trunc((startY\n        + markerRadiusMinor * Math.sin(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n    }\n    pathString = `M ${mx} ${my} L${lx} ${ly}`;\n    paths[i].setAttribute('d', pathString);\n    paths[i].setAttribute('stroke', noColor);\n    paths[i].setAttribute('stroke-width', markerWidth);\n    g.appendChild(paths[i]);\n\n    if (i % 5 == 0) {\n      tx = Math.round((startTx + textRadius\n        + textRadius * Math.cos(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      ty = Math.trunc((startTy\n        + textRadius * Math.sin(-Math.PI + 2 * Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      texts[i] = document.createElementNS(svgNS, 'text');\n      texts[i].setAttribute('id', `markerText ${i}`);\n      texts[i].setAttribute('x', tx);\n      texts[i].setAttribute('y', ty);\n      texts[i].setAttribute('font-size', 12);\n      texts[i].setAttribute('font-family', 'sans-serif');\n      texts[i].setAttribute('fill', 'black');\n      texts[i].setAttribute('stroke', 'white');\n      texts[i].setAttribute('text-anchor', 'middle');\n      texts[i].setAttribute('alignment-baseline', 'middle');\n      textNodes[i] = document.createTextNode('');\n      textNodes[i].nodeValue = min + i * (max - min) / (numMarkers - 1);\n      texts[i].appendChild(textNodes[i]);\n      g.appendChild(texts[i]);\n    }\n  }\n  svg.appendChild(g);\n\n  // Draw needle\n\n  needle.setAttribute('id', 'needle');\n  needle.setAttribute('d', needleString);\n  needle.setAttribute('fill', needleColor);\n  needle.setAttribute('stroke', 5);\n  svg.appendChild(needle);\n\n  // Draw inner circle\n\n  circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', width / 2);\n  circle.setAttribute('cy', height / 2);\n  circle.setAttribute('r', innerRadius);\n  circle.setAttribute('fill', innerCircleFillColor);\n  svg.appendChild(circle);\n\n  // Draw value\n\n  text.setAttribute('id', 'valueText');\n  text.setAttribute('x', '50%');\n  text.setAttribute('y', '50%');\n  text.setAttribute('font-size', 20);\n  text.setAttribute('font-family', 'sans-serif');\n  text.setAttribute('fill', 'white');\n  text.setAttribute('stroke', 'white');\n  text.setAttribute('text-anchor', 'middle');\n  text.setAttribute('alignment-baseline', 'middle');\n  text.appendChild(textNode);\n  svg.appendChild(text);\n\n  element.appendChild(svg);\n}\n\nDialFullBasic.prototype.set = function(value) {\n  const angle = 360 * (value - min) / (max - min);\n  const colorMarkers = Math.floor(angle / 360 * numMarkers);\n  needle.setAttribute('transform', `rotate(${angle}, ${width / 2}, ${height / 2})`);\n  textNode.nodeValue = Math.floor(value);\n  for (let i = 0; i < numMarkers; i += 1) {\n    if (i <= colorMarkers) {\n      if (i >= redMarkers) {\n        paths[i].setAttribute('stroke', warningColor);\n      } else {\n        paths[i].setAttribute('stroke', normalColor);\n      }\n    } else {\n      paths[i].setAttribute('stroke', noColor);\n    }\n  }\n};\n\n//# sourceURL=webpack:///./src/DialFullBasic.js?");

/***/ }),

/***/ "./src/DialFullBeamer.js":
/*!*******************************!*\
  !*** ./src/DialFullBeamer.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function DialFullBeamer(element, optionsString) {\n  const options = JSON.parse(optionsString);\n  const range = options.range || [0, 100];\n  const angleRange = options.angleRange || [0, 360];\n  const backgroundColor = options.backgroundColor || [200, 200, 200];\n  const foregroundColor = options.foregroundColor || [150, 150, 255];\n  const brightness = options.brightness || 1;\n  const diameter = options.diameter || 300;\n  const strokeWidth = 2;\n  const needleWidth = 6;\n  const markerWidth = 1;\n  const outerCircleWidth = 3;\n  const markerHeightMajor = 10;\n  const markerHeightMinor = 4;\n  const markerFontSize = Math.floor(diameter * 0.05);\n  const markerFontFamily = 'Arial, Helvetica, sans-serif';\n  const numMarkers = 61;\n  const markerDefaultColor = '#cdcdcd';\n  const width = diameter * 1.2;\n  const height = width;\n  const outerRadius = diameter / 2;\n  const outerRingRadius = diameter / 2 * 0.8;\n  const innerRadius = diameter / 2 * 0.3;\n  const markerRadius = outerRingRadius * 1.02;\n  const textRadius = outerRingRadius * 0.86;\n  const startMx = (width - markerRadius * 2) / 2;\n  const startY = height / 2;\n  const startTx = (width - textRadius * 2) / 2;\n  const startTy = height / 2;\n  const markers = [];\n  const document = element.ownerDocument;\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  const svgNS = svg.namespaceURI;\n  const needle = document.createElementNS(svgNS, 'polygon');\n  const glass = document.createElementNS(svgNS, 'rect');\n  const gMarkers = document.createElementNS(svgNS, 'g');\n  const gGlass = document.createElementNS(svgNS, 'g');\n  const defs = document.createElementNS(svgNS, 'defs');\n  const texts = [];\n  const textNodes = [];\n  const needleString = `${Math.floor(width / 2 + innerRadius)}, ${Math.floor(height / 2 + needleWidth / 2)} \\\n    ${Math.floor(width / 2 + innerRadius)}, ${Math.floor(height / 2 - needleWidth / 2)} \\\n    ${Math.floor(width / 2 - outerRingRadius)}, ${Math.floor(height / 2)}`;\n\n  let circle;\n  let x;\n  let y;\n  let tx;\n  let ty;\n  let markerAngle;\n  let markerRadians;\n  let prevTextIndex = 0;\n  let textIndex;\n\n  function getGlowFilter(filterName, floodColor, morphologyRadius, gaussianStdDeviation) {\n    const filter = document.createElementNS(svgNS, 'filter');\n    const morphology = document.createElementNS(svgNS, 'feMorphology');\n    const flood = document.createElementNS(svgNS, 'feFlood');\n    const composite = document.createElementNS(svgNS, 'feComposite');\n    const gaussian = document.createElementNS(svgNS, 'feGaussianBlur');\n    const merge = document.createElementNS(svgNS, 'feMerge');\n    const mergeNode1 = document.createElementNS(svgNS, 'feMergeNode');\n    const mergeNode2 = document.createElementNS(svgNS, 'feMergeNode');\n\n    filter.setAttribute('id', filterName);\n    filter.setAttribute('x', '-400%');\n    filter.setAttribute('y', '-400%');\n    filter.setAttribute('width', '900%');\n    filter.setAttribute('height', '900%');\n    morphology.setAttribute('operator', 'dilate');\n    morphology.setAttribute('radius', morphologyRadius);\n    morphology.setAttribute('in', 'SourceAlpha');\n    morphology.setAttribute('result', 'thicken');\n    filter.appendChild(morphology);\n    gaussian.setAttribute('in', 'thicken');\n    gaussian.setAttribute('stdDeviation', gaussianStdDeviation);\n    gaussian.setAttribute('result', 'blurred');\n    filter.appendChild(gaussian);\n    flood.setAttribute('result', 'glowColor');\n    flood.setAttribute('flood-color', `rgb(${floodColor[0]}, ${floodColor[1]}, ${floodColor[2]})`);\n    filter.appendChild(flood);\n    composite.setAttribute('in', 'glowColor');\n    composite.setAttribute('in2', 'blurred');\n    composite.setAttribute('operator', 'in');\n    composite.setAttribute('result', 'softGlow_colored');\n    filter.appendChild(composite);\n    mergeNode1.setAttribute('in', 'softGlow_colored');\n    merge.appendChild(mergeNode1);\n    mergeNode2.setAttribute('in', 'SourceGraphic');\n    merge.appendChild(mergeNode2);\n    filter.appendChild(merge);\n\n    return filter;\n  }\n\n  function getGlassFilter(filterName) {\n    const filter = document.createElementNS(svgNS, 'filter');\n    // const flood = document.createElementNS(svgNS, 'feFlood');\n    const turbulance = document.createElementNS(svgNS, 'feTurbulence');\n    const colorMatrix = document.createElementNS(svgNS, 'feColorMatrix');\n    const composite = document.createElementNS(svgNS, 'feComposite');\n    const merge = document.createElementNS(svgNS, 'feMerge');\n    const mergeNode1 = document.createElementNS(svgNS, 'feMergeNode');\n    const mergeNode2 = document.createElementNS(svgNS, 'feMergeNode');\n\n    filter.setAttribute('id', filterName);\n    filter.setAttribute('filterUnits', 'userSpaceOnUse');\n    filter.setAttribute('x', 0);\n    filter.setAttribute('y', 0);\n    filter.setAttribute('width', width);\n    filter.setAttribute('height', height);\n    turbulance.setAttribute('baseFrequency', '.002,.004');\n    turbulance.setAttribute('top', '-50%');\n    turbulance.setAttribute('type', 'fractalNoise');\n    turbulance.setAttribute('numOctaves', 4);\n    turbulance.setAttribute('seed', 0);\n    turbulance.setAttribute('result', 'FRACTAL-TEXTURE_10');\n    filter.appendChild(turbulance);\n    colorMatrix.setAttribute('in', 'FRACTAL-TEXTURE_10');\n    colorMatrix.setAttribute('type', 'matrix');\n    colorMatrix.setAttribute('values', '0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.2 1.1');\n    colorMatrix.setAttribute('result', 'FRACTAL-TEXTURE_20');\n    filter.appendChild(colorMatrix);\n    composite.setAttribute('in', 'BackgroundImage');\n    composite.setAttribute('in2', 'FRACTAL-TEXTURE_20');\n    composite.setAttribute('operator', 'in');\n    composite.setAttribute('result', 'comp');\n    filter.appendChild(composite);\n    mergeNode1.setAttribute('in', 'comp');\n    merge.appendChild(mergeNode1);\n    mergeNode2.setAttribute('in', 'SourceGraphic');\n    merge.appendChild(mergeNode2);\n    filter.appendChild(merge);\n\n    return filter;\n  }\n\n  svg.setAttribute('style', 'display: block; margin: auto');\n  svg.setAttribute('width', width);\n  svg.setAttribute('height', height);\n  svg.setAttribute('viewBox', `${0} ${0} ${width} ${height}`);\n\n  // SVG Defs\n\n  defs.appendChild(getGlowFilter('innercircle-filter', foregroundColor, 5 * brightness, 12 * brightness));\n  defs.appendChild(getGlowFilter('outercircle-filter', backgroundColor, 4 * brightness, 10 * brightness));\n  defs.appendChild(getGlowFilter('marker-filter', `rgb(255 * ${brightness}, 255 * ${brightness}, 255 * ${brightness})`, 3 * brightness, 6 * brightness));\n  defs.appendChild(getGlowFilter('ring-filter', foregroundColor, 4 * brightness, 10 * brightness));\n  defs.appendChild(getGlassFilter('glass-filter'));\n\n  svg.appendChild(defs);\n\n  // Draw outer circle\n\n  circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', width / 2);\n  circle.setAttribute('cy', height / 2);\n  circle.setAttribute('r', outerRadius);\n  circle.setAttribute('fill', `rgb(${backgroundColor[0]}, ${backgroundColor[1]}, ${backgroundColor[2]})`);\n  circle.setAttribute('stroke', markerDefaultColor);\n  circle.setAttribute('stroke-width', outerCircleWidth);\n  circle.setAttribute('filter', 'url(#outercircle-filter)');\n  svg.appendChild(circle);\n\n  // Draw outer ring circle\n\n  circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', width / 2);\n  circle.setAttribute('cy', height / 2);\n  circle.setAttribute('r', outerRingRadius);\n  circle.setAttribute('stroke', markerDefaultColor);\n  circle.setAttribute('stroke-width', strokeWidth);\n  circle.setAttribute('fill', `rgb(${backgroundColor[0]}, ${backgroundColor[1]}, ${backgroundColor[2]})`);\n  circle.setAttribute('filter', 'url(#ring-filter)');\n  svg.appendChild(circle);\n\n  // Draw markers\n\n  gMarkers.setAttribute('id', 'markers');\n  for (let i = 0; i < numMarkers; i += 1) {\n    markers[i] = document.createElementNS(svgNS, 'rect');\n    markerAngle = angleRange[0] + i * (angleRange[1] - angleRange[0]) / (numMarkers - 1);\n    markerRadians = -Math.PI + 2 * Math.PI * markerAngle / 360;\n    x = Math.round((startMx + markerRadius\n      + markerRadius * Math.cos(markerRadians)) * 100) / 100;\n    y = Math.trunc((startY\n      + markerRadius * Math.sin(markerRadians)) * 100) / 100;\n\n    markers[i].setAttribute('x', x);\n    markers[i].setAttribute('y', y);\n    markers[i].setAttribute('width', markerWidth);\n    if (i % 5 === 0) {\n      markers[i].setAttribute('height', markerHeightMajor);\n    } else {\n      markers[i].setAttribute('height', markerHeightMinor);\n    }\n    markers[i].setAttribute('transform', `rotate(${markerAngle + 90}, ${x}, ${y})`);\n    markers[i].setAttribute('fill', markerDefaultColor);\n    markers[i].setAttribute('stroke', markerDefaultColor);\n    markers[i].setAttribute('filter', 'url(#marker-filter)');\n    gMarkers.appendChild(markers[i]);\n\n    if (i % 5 === 0) {\n      tx = Math.round((startTx + textRadius + textRadius * Math.cos(markerRadians)) * 100) / 100;\n      ty = Math.trunc((startTy + textRadius * Math.sin(markerRadians)) * 100) / 100;\n      texts[i] = document.createElementNS(svgNS, 'text');\n      texts[i].setAttribute('id', `markerText ${i}`);\n      texts[i].setAttribute('x', tx);\n      texts[i].setAttribute('y', ty);\n      texts[i].setAttribute('font-size', markerFontSize);\n      texts[i].setAttribute('font-family', markerFontFamily);\n      texts[i].setAttribute('fill', 'white');\n      texts[i].setAttribute('text-anchor', 'middle');\n      texts[i].setAttribute('alignment-baseline', 'middle');\n      texts[i].setAttribute('filter', 'url(#marker-filter)');\n      textNodes[i] = document.createTextNode('');\n      textNodes[i].nodeValue = range[0] + i * (range[1] - range[0]) / (numMarkers - 1);\n      texts[i].appendChild(textNodes[i]);\n      gMarkers.appendChild(texts[i]);\n    }\n  }\n  svg.appendChild(gMarkers);\n\n  // Draw inner circle\n\n  circle = document.createElementNS(svgNS, 'circle');\n  circle.setAttribute('cx', width / 2);\n  circle.setAttribute('cy', height / 2);\n  circle.setAttribute('r', innerRadius);\n  circle.setAttribute('fill', `rgb(${backgroundColor[0]}, ${backgroundColor[1]}, ${backgroundColor[2]})`);\n  circle.setAttribute('filter', 'url(#innercircle-filter)');\n  svg.appendChild(circle);\n\n  // Draw needle\n\n  needle.setAttribute('id', 'needle');\n  needle.setAttribute('points', needleString);\n  needle.setAttribute('fill', `rgb(${foregroundColor[0]}, ${foregroundColor[1]}, ${foregroundColor[2]})`);\n  needle.setAttribute('transform', `rotate(${angleRange[0]}, ${width / 2}, ${height / 2})`);\n  svg.appendChild(needle);\n\n  // Draw glass\n\n  gGlass.setAttribute('id', 'glass');\n  gGlass.setAttribute('opacity', 0.5);\n  gGlass.setAttribute('filter', 'url(#glass-filter)');\n  //svg.appendChild(gGlass);\n\n  element.appendChild(svg);\n}\n\nDialFullBeamer.set = function(value) {\n  texts[prevTextIndex].setAttribute('font-size', markerFontSize);\n  textIndex = 5 * Math.round(numMarkers * (value - range[0]) / (range[1] - range[0]) / 5);\n  prevTextIndex = textIndex;\n  texts[textIndex].setAttribute('font-size', Math.floor(markerFontSize * 1.6));\n  const angle = angleRange[0] + (angleRange[1] - angleRange[0]) * (value - range[0])\n    / (range[1] - range[0]);\n  needle.setAttribute('transform', `rotate(${angle}, ${width / 2}, ${height / 2})`);\n};\n\n//# sourceURL=webpack:///./src/DialFullBeamer.js?");

/***/ }),

/***/ "./src/DialHalfBasic.js":
/*!******************************!*\
  !*** ./src/DialHalfBasic.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function DialHalfBasic(options) {\n    const strokeWidth = 2;\n    const needleWidth = 6;\n    const markerWidth = 3;\n    const numMarkers = 61;\n    const redMarkers = Math.floor(numMarkers * 0.8);\n    const noColor = '#cdcdcd';\n    this.width = 300;\n    this.height = this.width / 2;\n    const outerRadius = this.width / 2 * 0.95;\n    const middleRadius = this.width / 2 * 0.75;\n    const innerRadius = this.width / 2 * 0.25;\n    const markerRadius = middleRadius * 1.07;\n    const markerRadiusMajor = middleRadius * 1.20;\n    const markerRadiusMinor = middleRadius * 1.13;\n    const textRadius = middleRadius * 0.9;\n    const startMx = (this.width - markerRadius * 2) / 2;\n    const startY = this.height;\n    const startLx = (this.width - markerRadiusMajor * 2) / 2;\n    const startLMinorx = (this.width - markerRadiusMinor * 2) / 2;\n    const startTx = (this.width - textRadius * 2) / 2;\n    const startTy = this.height;\n    const paths = [];\n    const needleString = `M ${(this.width / 2)} ${(this.height + needleWidth / 2)} L${(this.width / 2)} ${(this.height - needleWidth / 2)} L${(this.width / 2 - middleRadius)} ${this.height}z`;\n    const element = options.containerId;\n    const document = element.ownerDocument;\n    this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    this.svgNS = this.svg.namespaceURI;\n    this.needle = document.createElementNS(this.svgNS, 'path');\n    this.valueText = document.createElementNS(this.svgNS, 'text');\n    this.valueTextNode = document.createTextNode('');\n    this.g = document.createElementNS(this.svgNS, 'g');\n    const texts = [];\n    const textNodes = [];\n    this.min = options.minValue || 0;\n    this.max = options.maxValue || 100;\n    const middleCircleFillColor = options.backgroundColor || '#2a2a2a';\n    const innerCircleFillColor = options.trimColor || '#660000';\n    const circleStrokeColor = options.trimColor || '#660000';\n    const needleColor = options.needleColor || '#da1b27';\n    const markerBackgroundColor = options.markerBackgroundColor || '#2a2a2a';\n    const normalColor = options.normalColor || 'green';\n    const warningColor = options.warningColor || 'red';\n\n    let circle;\n    let mx;\n    let my;\n    let lx;\n    let ly;\n    let tx;\n    let ty;\n    let pathString = '';\n\n\n    // Set up SVG\n\n    this.svg.setAttribute('width', this.width);\n    this.svg.setAttribute('height', this.height);\n    this.svg.setAttribute('viewBox', `${0} ${0} ${this.width} ${this.height}`);\n\n    // SVG Defs\n\n    // Draw elements\n\n    // Draw outer circle\n\n    this.circle = document.createElementNS(this.svgNS, 'circle');\n    this.circle.setAttribute('cx', this.width / 2);\n    this.circle.setAttribute('cy', this.height);\n    this.circle.setAttribute('r', outerRadius);\n    this.circle.setAttribute('fill', markerBackgroundColor);\n    this.svg.appendChild(this.circle);\n\n    // Draw middle circle\n\n    this.circle = document.createElementNS(this.svgNS, 'circle');\n    this.circle.setAttribute('cx', this.width / 2);\n    this.circle.setAttribute('cy', this.height);\n    this.circle.setAttribute('r', middleRadius);\n    this.circle.setAttribute('stroke', circleStrokeColor);\n    this.circle.setAttribute('stroke-width', strokeWidth);\n    this.circle.setAttribute('fill', middleCircleFillColor);\n    this.svg.appendChild(this.circle);\n\n    // Draw markers\n\n    this.g.setAttribute('id', 'markers');\n    for (let i = 0; i < numMarkers; i += 1) {\n      paths[i] = document.createElementNS(this.svgNS, 'path');\n      mx = Math.round((startMx + markerRadius\n        + markerRadius * Math.cos(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      my = Math.trunc((startY\n        + markerRadius * Math.sin(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      if (i % 5 == 0) {\n        lx = Math.round((startLx + markerRadiusMajor\n          + markerRadiusMajor * Math.cos(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n        ly = Math.trunc((startY\n          + markerRadiusMajor * Math.sin(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      } else {\n        lx = Math.round((startLMinorx + markerRadiusMinor\n          + markerRadiusMinor * Math.cos(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n        ly = Math.trunc((startY\n          + markerRadiusMinor * Math.sin(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n      }\n      pathString = `M ${mx} ${my} L${lx} ${ly}`;\n      paths[i].setAttribute('d', pathString);\n      paths[i].setAttribute('stroke', noColor);\n      paths[i].setAttribute('stroke-width', markerWidth);\n      this.g.appendChild(paths[i]);\n\n      if (i % 5 == 0) {\n        tx = Math.round((startTx + textRadius\n          + textRadius * Math.cos(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n        ty = Math.trunc((startTy\n          + textRadius * Math.sin(-Math.PI + Math.PI * (i + 1) / (numMarkers + 1))) * 100) / 100;\n        texts[i] = document.createElementNS(this.svgNS, 'text');\n        texts[i].setAttribute('id', `markerText ${i}`);\n        texts[i].setAttribute('x', tx);\n        texts[i].setAttribute('y', ty);\n        texts[i].setAttribute('font-size', 12);\n        texts[i].setAttribute('font-family', 'sans-serif');\n        texts[i].setAttribute('fill', 'black');\n        texts[i].setAttribute('stroke', 'white');\n        texts[i].setAttribute('text-anchor', 'middle');\n        texts[i].setAttribute('alignment-baseline', 'middle');\n        textNodes[i] = document.createTextNode('');\n        textNodes[i].nodeValue = this.min + i * (this.max - this.min) / (numMarkers - 1);\n        texts[i].appendChild(textNodes[i]);\n        this.g.appendChild(texts[i]);\n      }\n    }\n    this.svg.appendChild(this.g);\n\n    // Draw needle\n\n    this.needle.setAttribute('id', 'needle');\n    this.needle.setAttribute('d', needleString);\n    this.needle.setAttribute('fill', needleColor);\n    this.needle.setAttribute('stroke', 5);\n    this.svg.appendChild(this.needle);\n\n    // Draw inner circle\n\n    this.circle = document.createElementNS(this.svgNS, 'circle');\n    this.circle.setAttribute('cx', this.width / 2);\n    this.circle.setAttribute('cy', this.height);\n    this.circle.setAttribute('r', innerRadius);\n    this.circle.setAttribute('fill', innerCircleFillColor);\n    this.svg.appendChild(this.circle);\n\n    // Draw value text\n\n    this.valueText.setAttribute('id', 'valueText');\n    this.valueText.setAttribute('x', '50%');\n    this.valueText.setAttribute('y', this.height * 0.94);\n    this.valueText.setAttribute('font-size', 20);\n    this.valueText.setAttribute('font-family', 'sans-serif');\n    this.valueText.setAttribute('fill', 'white');\n    this.valueText.setAttribute('stroke', 'white');\n    this.valueText.setAttribute('text-anchor', 'middle');\n    this.valueText.setAttribute('alignment-baseline', 'middle');\n    this.valueText.appendChild(this.valueTextNode);\n    this.svg.appendChild(this.valueText);\n\n    element.appendChild(this.svg);\n}\n\nDialHalfBasic.prototype.set = function(value) {\n  this.angle = 180 * (value - this.min) / (this.max - this.min);\n  const colorMarkers = Math.floor(this.angle / 180 * this.numMarkers);\n\n  this.needle.setAttribute('transform', `rotate(${this.angle}, ${this.width / 2}, ${this.height})`);\n  this.valueTextNode.nodeValue = Math.floor(value);\n  for (let i = 0; i < this.numMarkers; i += 1) {\n    if (i <= this.colorMarkers) {\n      if (i >= this.redMarkers) {\n        this.paths[i].setAttribute('stroke', this.warningColor);\n      } else {\n        this.paths[i].setAttribute('stroke', this.normalColor);\n      }\n    } else {\n      this.paths[i].setAttribute('stroke', this.noColor);\n    }\n  }\n};\n\n//# sourceURL=webpack:///./src/DialHalfBasic.js?");

/***/ }),

/***/ "./src/svgdash.js":
/*!************************!*\
  !*** ./src/svgdash.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("window.DialHalfBasic = DialHalfBasic;\nwindow.DialFullBasic = DialFullBasic;\nwindow.DialFullBeamer = DialFullBeamer;\n\n//# sourceURL=webpack:///./src/svgdash.js?");

/***/ }),

/***/ 0:
/*!****************************************************************************************************!*\
  !*** multi ./src/svgdash.js ./src/DialHalfBasic.js ./src/DialFullBasic.js ./src/DialFullBeamer.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./src/svgdash.js */\"./src/svgdash.js\");\n__webpack_require__(/*! ./src/DialHalfBasic.js */\"./src/DialHalfBasic.js\");\n__webpack_require__(/*! ./src/DialFullBasic.js */\"./src/DialFullBasic.js\");\nmodule.exports = __webpack_require__(/*! ./src/DialFullBeamer.js */\"./src/DialFullBeamer.js\");\n\n\n//# sourceURL=webpack:///multi_./src/svgdash.js_./src/DialHalfBasic.js_./src/DialFullBasic.js_./src/DialFullBeamer.js?");

/***/ })

/******/ });